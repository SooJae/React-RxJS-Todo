@import '~include-media-or/dist/include-media';
@import './Unit.scss';
@import './Math.scss';
@import '../Settings/Layouts.scss';

// ** Basics *******************************************************************
// == Color ====================================================================
@function lightColor($color, $amount: 0) {
  @return lighten($color, 2 = $amount);
}
@function darkColor($color, $amount: 0) {
  @return darken($color, 2 = $amount);
}

// == Font =====================================================================
@mixin font-legibility() {
  -webkit-text-stroke-width: 0.04px;
  -webkit-font-smoothing:    antialiased;
  -moz-osx-font-smoothing:   grayscale;
  text-shadow:               0px 0px 0.001px #ACACAC;
  text-rendering:            geometricPrecision;
  font-kerning:              normal;
  font-variant-ligatures:    normal;
}

// == Utils ====================================================================
@function range($values) {
  $iter-num: 0;
  $range-list: ();

  @if type-of($values) == number {
    $iter-num: $values;
  }
  @else {
    $iter-num: length($values);
  }

  @for $i from 1 through $iter-num {
    $range-list: append($range-list, $i);
  }
  @return $range-list;
}

// https://hugogiraudel.com/2014/04/28/casting-map-into-list/
@function to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($value) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != 'list', ($value,), $value);
}

@function to-map($keys, $values) {
  $map: ();

  @each $i in range($keys) {
    $map-value: (nth($keys, $i): nth($values, $i));
    $map: map-merge($map, $map-value);
  }
  @return $map;
}

@function map-index($map, $key-value, $type: 'key') {
  @if      $type == 'key'   {
    @return index(map-keys($map),   $key-value);
  }
  @else if $type == 'value' {
    @return index(map-values($map), $key-value);
  }
  @else if $type == 'map'   {
    @return index($map, to-list($key-value));
  }
}

@function map-nth($map, $n, $type: 'key') {
  @if      $type == 'key'   {
    @return nth(nth($map, $n), 1);
  }
  @else if $type == 'value' {
    @return nth(nth($map, $n), 2);
  }
}

// ** Responsive ***************************************************************
// == Size =====================================================================
$DEFAULT-BREAK: default !default;
$DEFAULT-SIZE:  16px    !default;

@function zip-responsive() {
  @return zip(
    map-values($screen-distances), map-values($screen-sizes      ),
    map-values($breakpoints     ), map-values($breakpoints-height)
  );
}

@function calc-ppi($screen-width, $screen-height, $screen-size) {
  @return sqrt(pow($screen-width, 2) + pow($screen-height, 2)) / $screen-size;
}

@function calc-angle($size) {
  $size:     num(px($size));
  $values:   zip-responsive();
  $smallest: null;

  @each $value in $values {
    $screen-distance: nth($value, 1) * 100;
    $screen-size:     nth($value, 2);
    $screen-width:    num(nth($value, 3));
    $screen-height:   num(nth($value, 4));

    $ppi: calc-ppi($screen-width, $screen-height, $screen-size);
    $independent-value: $screen-distance * $ppi;
    @if (($smallest == null) or ($smallest > $independent-value)) {
      $smallest: $independent-value;
    }
  }

  $angle: $size * 54 / $smallest;
  $visual-angle: atan($angle) * (10800 / pi());
  @return count-round($visual-angle, 2);
}

@function calc-size($visual-angle) {
  $values:      zip-responsive();
  $break-sizes: ();

  @each $value in $values {
    $screen-distance: nth($value, 1) * 100;
    $screen-size:     nth($value, 2);
    $screen-width:    num(nth($value, 3));
    $screen-height:   num(nth($value, 4));

    $ppi: calc-ppi($screen-width, $screen-height, $screen-size);
    $angle: tan(pi() * $visual-angle / 10800);
    $size: $screen-distance * $angle * $ppi / 54;

    $break-sizes: append($break-sizes, ($size));
  }

  @return $break-sizes;
}

// https://gist.github.com/eduardoboucas/84144cd85cbd2ad4db1ca8b902585ca0
@function im-to-em($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $key, $value in $breakpoints {
    $em-value: ($value / $base-value) * 1em;
    $new-breakpoints: map-merge($new-breakpoints, ($key: $em-value));
  }

  @return $new-breakpoints;
}

// https://www.madebymike.com.au/writing/fluid-type-calc-examples/
@function fluid-size($start-size, $end-size, $min-screen,  $max-screen) {
  $start-size: em($start-size);
  $end-size:   em($end-size);
  $min-screen: em($min-screen);
  $max-screen: em($max-screen);

  $rate: ($end-size - $start-size) / ($max-screen - $min-screen);
  $basic-size: $start-size - $rate * $min-screen;

  $sign: "+";
  @if ($basic-size < 0) {
    $sign: "-";
    $basic-size: abs($basic-size);
  }
  @return calc(#{$rate*100}vw #{$sign} #{$basic-size});
}

@mixin fluid-media($property, $sizes) {
  $fluid-sizes: to-unit-map($sizes, px);
  $fluid-breakpoints: map-merge(($DEFAULT-BREAK: 0px), to-unit-map($breakpoints, px));
  @if not map-has-key($fluid-sizes, $DEFAULT-BREAK) {
    $default-map: ($DEFAULT-BREAK: $DEAFULT-SIZE);
    $fluid-sizes: map-merge($default-map, $fluid-sizes);
  }

  @each $i in range(length($fluid-breakpoints) - 1) {
    $now-key:  map-nth($fluid-breakpoints, $i);
    $next-key: map-nth($fluid-breakpoints, $i + 1);

    $now-size:   map-get($fluid-sizes, $now-key );
    $next-size:  map-get($fluid-sizes, $next-key);
    $now-break:  map-get($fluid-breakpoints, $now-key );
    $next-break: map-get($fluid-breakpoints, $next-key);
    @if $now-key == $DEFAULT-BREAK {
      #{$property}: fluid-size($now-size, $next-size, $now-break, $next-break);
    }
    @else {
      @include media(">=#{$now-key}") {
        #{$property}: fluid-size($now-size, $next-size, $now-break, $next-break);
      }
    }
  }
}

@mixin fluid($property, $size) {
  $scaled-size: calc-size(calc-angle($size));

  $keys:   join($DEFAULT-BREAK, map-keys($breakpoints));
  $values: join($size, $scaled-size);

  @include fluid-media($property, to-map($keys, $values));
}

@mixin font-size($size) {
  @include fluid(font-size, $size);
}

// ** Container ****************************************************************
@mixin container() {
  contain: content;
}

@mixin container-strict() {
  contain: strict;
}

@mixin container-all() {
  contain:strict style;
}

// ** Flex *********************************************************************
// == Flex Container ===========================================================
$DEFAULT-FLEX-MODE: flex;

@mixin flex-container($mode: $DEFAULT-FLEX-MODE) {
  display: $mode;
}

@mixin flex-container-all($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);

  &:nth-child(1) {
    @include flex-container($mode);
  }
}

@mixin flex-container-inline() {
  @include flex-container(inline-flex);
}

// alias
@mixin flex-container-fit() {
  @include flex-container-inline();
}

// -- Flex Container Start -----------------------------------------------------
@mixin flex-container-flow($direction: row, $wrap: nowrap) {
  flex-flow: $direction $wrap;
}

// -- Flex Container Start -----------------------------------------------------
@mixin flex-container-start-left($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: row;
}

@mixin flex-container-start-right($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: row-reverse;
}

@mixin flex-container-start-top($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: column;
}

@mixin flex-container-start-bottom($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: column-reverse;
}

// -- Flex Container Line ------------------------------------------------------
@mixin flex-container-line-single($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-wrap: nowrap;
}

@mixin flex-container-line-multi($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-wrap: wrap;
}

@mixin flex-container-line-multi-reverseY($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-wrap: wrap-reverse;
}

// -- Flex Container Align -----------------------------------------------------
@mixin flex-container-alignX-start($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: flex-start;
}

@mixin flex-container-alignX-end($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: flex-end;
}

@mixin flex-container-alignX-center($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: center;
}

@mixin flex-container-alignX-fill($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: stretch;
}

@mixin flex-container-alignX-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: space-between;
}

@mixin flex-container-alignX-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: space-around;
}

@mixin flex-container-alignY-start($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: flex-start;
}

@mixin flex-container-alignY-end($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: flex-end;
}

@mixin flex-container-alignY-center($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: center;
}

@mixin flex-container-alignY-baseline($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: baseline;
}

@mixin flex-container-alignY-fill($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: stretch;
}

@mixin flex-container-alignY-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-content: space-between;
}

@mixin flex-container-alignY-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-content: space-around;
}

@mixin flex-container-alignY-multi-start($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: flex-start;
}

@mixin flex-container-alignY-multi-end($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: flex-end;
}

@mixin flex-container-alignY-multi-center($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: center;
}

@mixin flex-container-alignY-multi-fill($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: stretch;
}

@mixin flex-container-alignY-multi-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: space-between;
}

@mixin flex-container-alignY-multi-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-items: space-around;
}

// Alias
@mixin flex-container-alignX-center-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignX-edge($mode);
}

@mixin flex-container-alignX-center-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignX-uniform($mode);
}

@mixin flex-container-alignY-center-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-edge($mode);
}

@mixin flex-container-alignY-center-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-uniform($mode);
}

@mixin flex-container-alignY-multi-center-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-multi-edge($mode);
}

@mixin flex-container-alignY-multi-center-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-multi-uniform($mode);
}


// == Flex Item ================================================================
$DEFAULT-FLEX-ORDER: 0;
$DEFAULT-FLEX-SIZE: auto;
$DEFAULT-FLEX-GROW: 0;
$DEFAULT-FLEX-SHRINK: 1;

@mixin flex-item($grow: $DEFAULT-FLEX-GROW, $shrink: $DEFAULT-FLEX-SHRINK, $basis: $DEFAULT-FLEX-SIZE) {
  flex: $grow, $shrink, $basis;
}

// -- Flex Item Align ----------------------------------------------------------
@mixin flex-item-alignY-start() {
  align-self: flex-start;
}

@mixin flex-item-alignY-end() {
  align-self: flex-end;
}

@mixin flex-item-alignY-center() {
  align-self: center;
}

@mixin flex-item-alignY-baseline() {
  align-self: baseline;
}

@mixin flex-item-alignY-fill() {
  align-self: stretch;
}

// -- Flex Item Order ----------------------------------------------------------
@mixin flex-item-order($order: $DEFAULT-FLEX-ORDER) {
  order: $order;
}

@mixin flex-item-order-decrease($order: $DEFAULT-FLEX-ORDER) {
  order: - $order;
}

// Alias
@mixin flex-item-order-increase($order: $DEFAULT-FLEX-ORDER) {
  @include flex-item-order($order);
}

// -- Flex Item Size -----------------------------------------------------------
@mixin flex-item-size($size: $DEFAULT-FLEX-SIZE) {
  flex-basis: $size;
}

@mixin flex-item-size-up($rate: $DEFAULT-FLEX-GROW) {
  flex-grow: $rate;
}

@mixin flex-item-size-down($rate: $DEFAULT-FLEX-SHRINK) {
  flex-shrink: $rate;
}

// Alias
@mixin flex-item-size-increase($rate: $DEFAULT-FLEX-GROW) {
  @include flex-item-size-up($rate);
}

@mixin flex-item-size-decrease($rate: $DEFAULT-FLEX-SHRINK) {
  @include flex-item-size-down($rate);
}
