// ** Basics *******************************************************************
// == Color ====================================================================
@function lightColor($color, $amount: 0) {
  @return lighten($color, 2 = $amount);
}
@function darkColor($color, $amount: 0) {
  @return darken($color, 2 = $amount);
}

// == Font =====================================================================
@mixin font-legibility() {
  -webkit-text-stroke-width: 0.04px;
  -webkit-font-smoothing:    antialiased;
  -moz-osx-font-smoothing:   grayscale;
  text-shadow:               0px 0px 0.001px #ACACAC;
  text-rendering:            geometricPrecision;
  font-kerning:              normal;
  font-variant-ligatures:    normal;
}

// == Unit =====================================================================
// https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// https://stackoverflow.com/questions/47630616/scss-arithmetic-operation-with-string
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);;
}

@function to-unit($value) {
  @if type-of($value) != 'string' {
    @error 'Value for `to-unit` should be a string.';
  }

  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  $parsed-unit: false;

  @each $unit in $units {
    // str-index - find substring in a string
    // 'px' in '10px' for example

    // $unit is a pair of ['px': 1px] (item in $units)
    // nth(['px': 1px], 1) returns 'px'
    // nth(['px': 1px], 2) returns 1px

    @if (str-index($value, nth($unit, 1))) {
      $parsed-unit: nth($unit, 2);
    }
  }

  @if (not $parsed-unit) {
    @error 'Invalid unit `#{$value}`.';
  }

  @return $parsed-unit;
}

// https://www.sitepoint.com/understanding-sass-units/
@function convert-unit($value, $unit) {
  $units: (
    'px': 0px,
    'cm': 0cm,
    'mm': 0mm,
    '%': 0%,
    'ch': 0ch,
    'in': 0in,
    'em': 0em,
    'rem': 0rem,
    'pt': 0pt,
    'pc': 0pc,
    'ex': 0ex,
    'vw': 0vw,
    'vh': 0vh,
    'vmin': 0vmin,
    'vmax': 0vmax,
    'deg': 0deg,
    'turn': 0turn,
    'rad': 0rad,
    'grad': 0grad,
    's': 0s,
    'ms': 0ms,
    'Hz': 0Hz,
    'kHz': 0kHz,
    'dppx': 0dppx,
    'dpcm': 0dpcm,
    'dpi': 0dpi,
  );

  @if map-has-key($units, $unit) {
    @return map-get($units, $unit) + $value;
  }

  @error "Unknown unit `#{$unit}`.";
}

// ** Responsive ***************************************************************
// == Size =====================================================================
// https://gist.github.com/eduardoboucas/84144cd85cbd2ad4db1ca8b902585ca0
@function im-to-em($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $em-value: ($value / $base-value) * 1em;
    $new-breakpoints: map-merge($new-breakpoints, ($name: $em-value));
  }

  @return $new-breakpoints;
}

// https://www.madebymike.com.au/writing/fluid-type-calc-examples/
@function fluid-size($start-size, $end-size, $min-screen,  $max-screen) {
  $rate: ($end-size - $start-size) / ($max-screen - $min-screen);
  $basic-size: $start-size - $rate * $min-screen;

  $sign: "+";
  @if ($basic-size < 0) {
    $sign: "-";
    $basic-size: abs($basic-size);
  }
  @return calc(#{$rate*100}vw #{$sign} #{$basic-size});
}

@mixin fluid-media($property,
  $default-size, $phone-size,   $tablet-size,
  $laptop-size,  $desktop-size, $high-dekstop-size) {

  #{$property}:   fluid-size($default-size, $phone-size,        0px,            $phone-width       );

  @include media(">=phone") {
    #{$property}: fluid-size($phone-size,   $tablet-size,       $phone-width,   $tablet-width      );
  }
  @include media(">=tablet") {
    #{$property}: fluid-size($tablet-size,  $laptop-size,       $tablet-width,  $laptop-size       );
  }
  @include media(">=laptop") {
    #{$property}: fluid-size($laptop-size,  $desktop-size,      $laptop-width,  $desktop-width     );
  }
  @include media(">=desktop") {
    #{$property}: fluid-size($desktop-size, $high-desktop-size, $desktop-width, $high-desktop-width);
  }
}

@mixin fluid-font-size($default-size, $phone-size,   $tablet-size,
                       $laptop-size,  $desktop-size, $high-dekstop-size) {
  @include fluid-media(font-size,
  $default-size, $phone-size,   $tablet-size,
  $laptop-size,  $desktop-size, $high-dekstop-size);
}

// ** Container ****************************************************************
@mixin container() {
  contain: content;
}

@mixin container-strict() {
  contain: strict;
}

@mixin container-all() {
  contain:strict style;
}

// ** Flex *********************************************************************
// == Flex Container ===========================================================
$DEFAULT-FLEX-MODE: flex;

@mixin flex-container($mode: $DEFAULT-FLEX-MODE) {
  display: $mode;
}

@mixin flex-container-all($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);

  &:nth-child(1) {
    @include flex-container($mode);
  }
}

@mixin flex-container-inline() {
  @include flex-container(inline-flex);
}

// alias
@mixin flex-container-fit() {
  @include flex-container-inline();
}

// -- Flex Container Start -----------------------------------------------------
@mixin flex-container-flow($direction: row, $wrap: nowrap) {
  flex-flow: $direction $wrap;
}

// -- Flex Container Start -----------------------------------------------------
@mixin flex-container-start-left($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: row;
}

@mixin flex-container-start-right($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: row-reverse;
}

@mixin flex-container-start-top($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: column;
}

@mixin flex-container-start-bottom($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-direction: column-reverse;
}

// -- Flex Container Line ------------------------------------------------------
@mixin flex-container-line-single($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-wrap: nowrap;
}

@mixin flex-container-line-multi($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-wrap: wrap;
}

@mixin flex-container-line-multi-reverseY($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  flex-wrap: wrap-reverse;
}

// -- Flex Container Align -----------------------------------------------------
@mixin flex-container-alignX-start($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: flex-start;
}

@mixin flex-container-alignX-end($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: flex-end;
}

@mixin flex-container-alignX-center($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: center;
}

@mixin flex-container-alignX-fill($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: stretch;
}

@mixin flex-container-alignX-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: space-between;
}

@mixin flex-container-alignX-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  justify-content: space-around;
}

@mixin flex-container-alignY-start($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: flex-start;
}

@mixin flex-container-alignY-end($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: flex-end;
}

@mixin flex-container-alignY-center($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: center;
}

@mixin flex-container-alignY-baseline($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: baseline;
}

@mixin flex-container-alignY-fill($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-items: stretch;
}

@mixin flex-container-alignY-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-content: space-between;
}

@mixin flex-container-alignY-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container($mode);
  align-content: space-around;
}

@mixin flex-container-alignY-multi-start($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: flex-start;
}

@mixin flex-container-alignY-multi-end($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: flex-end;
}

@mixin flex-container-alignY-multi-center($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: center;
}

@mixin flex-container-alignY-multi-fill($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: stretch;
}

@mixin flex-container-alignY-multi-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-content: space-between;
}

@mixin flex-container-alignY-multi-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-line-multi($mode);
  align-items: space-around;
}

// Alias
@mixin flex-container-alignX-center-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignX-edge($mode);
}

@mixin flex-container-alignX-center-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignX-uniform($mode);
}

@mixin flex-container-alignY-center-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-edge($mode);
}

@mixin flex-container-alignY-center-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-uniform($mode);
}

@mixin flex-container-alignY-multi-center-edge($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-multi-edge($mode);
}

@mixin flex-container-alignY-multi-center-uniform($mode: $DEFAULT-FLEX-MODE) {
  @include flex-container-alignY-multi-uniform($mode);
}


// == Flex Item ================================================================
$DEFAULT-FLEX-ORDER: 0;
$DEFAULT-FLEX-SIZE: auto;
$DEFAULT-FLEX-GROW: 0;
$DEFAULT-FLEX-SHRINK: 1;

@mixin flex-item($grow: $DEFAULT-FLEX-GROW, $shrink: $DEFAULT-FLEX-SHRINK, $basis: $DEFAULT-FLEX-SIZE) {
  flex: $grow, $shrink, $basis;
}

// -- Flex Item Align ----------------------------------------------------------
@mixin flex-item-alignY-start() {
  align-self: flex-start;
}

@mixin flex-item-alignY-end() {
  align-self: flex-end;
}

@mixin flex-item-alignY-center() {
  align-self: center;
}

@mixin flex-item-alignY-baseline() {
  align-self: baseline;
}

@mixin flex-item-alignY-fill() {
  align-self: stretch;
}

// -- Flex Item Order ----------------------------------------------------------
@mixin flex-item-order($order: $DEFAULT-FLEX-ORDER) {
  order: $order;
}

@mixin flex-item-order-decrease($order: $DEFAULT-FLEX-ORDER) {
  order: - $order;
}

// Alias
@mixin flex-item-order-increase($order: $DEFAULT-FLEX-ORDER) {
  @include flex-item-order($order);
}

// -- Flex Item Size -----------------------------------------------------------
@mixin flex-item-size($size: $DEFAULT-FLEX-SIZE) {
  flex-basis: $size;
}

@mixin flex-item-size-up($rate: $DEFAULT-FLEX-GROW) {
  flex-grow: $rate;
}

@mixin flex-item-size-down($rate: $DEFAULT-FLEX-SHRINK) {
  flex-shrink: $rate;
}

// Alias
@mixin flex-item-size-increase($rate: $DEFAULT-FLEX-GROW) {
  @include flex-item-size-up($rate);
}

@mixin flex-item-size-decrease($rate: $DEFAULT-FLEX-SHRINK) {
  @include flex-item-size-down($rate);
}
