{"version":3,"sources":["Layouts/TodoTemplate.module.scss","Components/TodoInsert.module.scss","Components/TodoListItem.module.scss","Components/TodoList.module.scss","Tools/Tools.ts","Layouts/TodoTemplate.tsx","Generic/TodoModel.tsx","Services/TodoService.tsx","Components/TodoList.tsx","Components/TodoInsert.tsx","Tools/RecyclerProvider.ts","Layouts/ExternalScrollView.tsx","Components/TodoListItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","stylesBind","styles","classNames","bind","cx","TodoTemplate","children","className","TodoItem","Record","id","text","checked","largeInitItems","List","array","i","push","update$","BehaviorSubject","todos","insert$","Subject","remove$","toggle$","nextId","largeItemSize","todos$","pipe","scan","operation","publishReplay","refCount","map","todo","subscribe","filter","set","ListViewType","TodoService","initData","onInsert","next","onRemove","onToggle","TodoInsert","useState","value","setValue","inputRef","useRef","onChange","useCallback","e","currentTarget","onSubmit","current","focus","preventDefault","placeholder","ref","type","ListDataProvider","rowHasChanged","getStableId","index","this","m_data","get","newData","newSize","equals","m_size","sizeData","setSize","findIndex","firstModifiedIndex","dp","newInstance","size","m_firstIndexToProcess","ObjectUtil","isNullOrUndefined","getFirstIndexChange","Math","max","min","m_requiresDataChangeHandling","m_hasStableIds","toString","BaseDataProvider","resize$","fromEvent","window","ExternalScrollview","resize","handleLayout","windowWidth","innerWidth","ScrollWidth","rem","props","onSizeChanged","height","innerHeight","width","scrollRef","createRef","scrollTo","arg","unsubscribe","React","Component","memo","even","onRemoveDown","onToggleDown","onPointerDown","renderData","r1","r2","cloneWithRows","dataProvider","setDataProvider","useEffect","sub","init","layoutProvider","LayoutProvider","ODDITEMS","EVENITEMS","dim","rowRenderer","viewType","key","externalScrollView","ExternalScrollView","canChangeSize","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,YAAY,gCAAgC,QAAU,gC,mBCA1HD,EAAOC,QAAU,CAAC,WAAa,iC,mBCA/BD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,KAAO,2BAA2B,OAAS,6BAA6B,SAAW,+BAA+B,KAAO,2BAA2B,QAAU,gC,mBCAlOD,EAAOC,QAAU,CAAC,SAAW,6B,sJCatB,SAASC,EAAWC,GACzB,OAAOC,IAAWC,KAAKF,G,YCXnBG,EAAKJ,E,OAAWC,GAgBPI,EATqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrC,OACE,yBAAKC,UAAWH,EAAG,iBACjB,yBAAKG,UAAWH,EAAG,cAAnB,YACA,yBAAKG,UAAWH,EAAG,YAAaE,K,wECPzBE,EAAsCC,YAAO,CACxDC,GAAS,EACTC,KAAS,GACTC,SAAS,ICJLC,EAAiBC,YAAM,WAE3B,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAHI,KAGeA,IACjCD,EAAME,KAAK,IAAIT,EAAS,CACtBE,GAAIM,EACJL,KAAK,QAAD,OAAUK,GACdJ,SAAS,KAGb,OAAOG,EAToB,IAcvBG,EAAU,IAAIC,KAAgB,SAACC,GAAD,OAAuBA,KACrDC,EAAU,IAAIC,IACdC,EAAU,IAAID,IACdE,EAAU,IAAIF,IAIhBG,EAASC,KACPC,EAAST,EAAQU,KACrBC,aAAK,SAACT,EAAOU,GAAR,OAAsBA,EAAUV,KAAQP,GAG7CkB,YAAc,GACdC,eAKFX,EAAQO,KACNK,aAAI,SAACC,GAAD,OAAU,SAACd,GAAD,OAAuBA,EAAMH,KAAKiB,QAChDC,UAAUjB,GAEZK,EAAQK,KACNK,aAAI,SAACvB,GAAD,OAAU,SAACU,GAAD,OAAuBA,EAAMgB,QAAO,SAAAF,GAAI,OAAIA,EAAKxB,KAAOA,UACtEyB,UAAUjB,GAEZM,EAAQI,KACNK,aAAI,SAACvB,GAAD,OAAU,SAACU,GAAD,OAAuBA,EAAMa,KAAI,SAAAC,GAAI,OAAIA,EAAKxB,KAAOA,EAC/DwB,EAAKG,IAAI,WAAYH,EAAKtB,SAC1BsB,UAEJC,UAAUjB,GAIZ,ICvCKoB,EDuDUC,EAhBK,CAClBC,SAAU3B,EACVc,OAAQA,EAERc,SAAU,SAAC9B,GACTU,EAAQqB,KAAK,IAAIlC,EAAS,CACxBE,GAASe,EACTd,KAASA,EACTC,SAAS,KAEXa,KAEFkB,SAAU,SAACjC,GAAD,OAAyBa,EAAQmB,KAAKhC,IAChDkC,SAAU,SAAClC,GAAD,OAAyBc,EAAQkB,KAAKhC,K,QE/D5CN,EAAKJ,E,OAAWC,GAqCP4C,EAnCI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,KAEjBC,EAAWC,iBAAyB,MAEpCC,EAAWC,uBAAY,SAACC,GAC5BL,EAASK,EAAEC,cAAcP,SACxB,IACGQ,EAAWH,uBAAY,SAACC,GACT,IAAD,EAAJ,KAAVN,EACF,UAAAE,EAASO,eAAT,SAAkBC,SAElBlB,EAAYE,SAASM,GACrBC,EAAS,KAIXK,EAAEK,mBACD,CAACX,IAGJ,OACE,0BAAMxC,UAAWH,EAAG,cAAemD,SAAUA,GAC3C,2BACEI,YAAY,gBACZZ,MAAOA,EACPI,SAAUA,EACVS,IAAKX,IAEP,4BAAQY,KAAK,UACX,kBAAC,IAAD,S,wDC6EaC,E,0KACAC,EACAC,GACE,OAAO,IAAIF,EAAiBC,EAAeC,O,GAhDlE,8KAKyBC,GACrB,OAAOC,KAAKC,OAAOC,IAAIH,KAN3B,0CAU8BI,EAAkBC,GAA0B,IAAD,OACrE,GAAGJ,KAAKC,OAAOI,OAAOF,GACpB,OAAOH,KAAKM,OAGd,GAAGN,KAAKM,OAASF,EAAS,CACxB,IAAMG,EAAWJ,EAAQK,QAAQR,KAAKM,QACtC,OAAQN,KAAKC,OACVQ,WAAU,SAAC5B,EAAOkB,GAAR,OAAkB,EAAKF,cAAchB,EAAO0B,EAASL,IAAIH,OAGtE,OADiBC,KAAKC,OAAOO,QAAQJ,GAElCK,WAAU,SAAC5B,EAAOkB,GAAR,OAAkB,EAAKF,cAAchB,EAAOsB,EAAQD,IAAIH,SAtB3E,oCA4BuBI,EAAkBO,GACrC,IAAMC,EAAYX,KAAKY,YAAYZ,KAAKH,cAAeG,KAAKF,aACtDM,EAAYD,EAAQU,KAW1B,OATAF,EAAGG,sBAAwBC,aAAWC,kBAAkBN,GAC9BV,KAAKiB,oBAAoBd,EAASC,GAClCc,KAAKC,IAAID,KAAKE,IAAIV,EAAoBV,KAAKC,OAAOY,MAAO,GAE/EF,EAAGG,wBAA0Bd,KAAKC,OAAOY,OAC3CF,EAAGU,8BAA+B,GAEpCV,EAAGV,OAASE,EACZQ,EAAGL,OAASF,EACLO,MAzCX,GApDA,kDAWE,WAAYd,EACAC,GAA2C,IAAD,8BACpD,cAAMD,EAAeC,IAZhBD,mBAW+C,IAR/CC,iBAQ+C,IAP5CgB,sBAAgC,EAOY,EAN5CR,OAAiB,EAM2B,EAL5CL,OAAkBrD,YAAQ,IAKkB,EAJ5C0E,gBAAiB,EAI2B,EAH5CD,8BAA+B,EAKvC,EAAKxB,cAAgBA,EACjBC,GACF,EAAKA,YAAcA,EACnB,EAAKwB,gBAAiB,GAEtB,EAAKxB,YAAc,SAACC,GAAD,OAAWA,EAAMwB,YAPc,EAZxD,yDA+BI,OAAOvB,KAAKC,SA/BhB,gCAmCI,OAAOD,KAAKM,SAnChB,qCAuCI,OAAON,KAAKsB,iBAvChB,mDA2CI,OAAOtB,KAAKqB,+BA3ChB,uDA+CI,OAAOrB,KAAKc,0BA/ChB,GAAkEU,sB,yBCH5DC,EAAUC,YAAUC,OAAQ,UAsCnBC,E,4MA7BbC,Y,IASAC,aAAe,SAAC3C,GACd,IAAM4C,EAAcJ,OAAOK,WACrBC,EAAcF,GAzBR,KA0BQG,IA3BR,GA4BQH,EAzBL,EA0Bf,EAAKI,MAAMC,cAAc,CACvBC,OAAQV,OAAOW,YACfC,MAAQN,K,EAIZO,UAAYC,sB,EACZC,SAAW,SAACC,GAA2B,IAAD,EACpC,YAAKH,UAAUlD,eAAf,SAAwBoD,SAASC,I,kEApBjC3C,KAAK6B,OAASJ,EAAQxD,UAAU+B,KAAK8B,gB,6CAIrC9B,KAAK6B,OAAQe,gB,+BAmBb,OAAO,kBAAC,IAAD,eAAclD,IAAKM,KAAKwC,WAAexC,KAAKmC,Y,GA1BtBU,IAAMC,W,wBCdjC5G,EAAKJ,E,OAAWC,GA0BP8G,MAAME,MAlBA,SAAC,GAAuC,IAArC/E,EAAoC,EAApCA,KAAMgF,EAA8B,EAA9BA,KACpBxG,EAAsBwB,EAAtBxB,GAAIC,EAAkBuB,EAAlBvB,KAAMC,EAAYsB,EAAZtB,QACZuG,EAAe/D,uBAAY,kBAAMb,EAAYI,SAASjC,KAAK,CAACA,IAC5D0G,EAAehE,uBAAY,kBAAMb,EAAYK,SAASlC,KAAK,CAACA,IAElE,OACE,yBAAKH,UAAWH,EAAG,eAAgB,CAAE8G,UACnC,yBAAK3G,UAAWH,EAAG,WAAY,CAAEQ,YAAYyG,cAAeD,GACzDxG,EAAU,kBAAC,IAAD,MAAiC,kBAAC,IAAD,MAC5C,yBAAKL,UAAWH,EAAG,SAAUO,IAE/B,yBAAKJ,UAAWH,EAAG,UAAWiH,cAAeF,GAC3C,kBAAC,IAAD,W,QJbF/G,GAAKJ,E,OAAWC,I,SAEjBqC,O,uBAAAA,I,0BAAAA,M,KAKL,IAiEeyE,OAAME,MAjEJ,WACf,IAAMR,EAAQZ,OAAOK,WACfoB,EAAa,IAAIxD,GACrB,SAACyD,EAAeC,GAAhB,OAAkCD,IAAOC,KACzCC,cAAclF,EAAYC,UAJP,EAMmBM,mBAASwE,GAN5B,mBAMdI,EANc,KAMAC,EANA,KAOrBC,qBAAU,WACR,IAAMC,EAAMtF,EAAYZ,OAAOQ,WAAU,SAACf,GACxCuG,GAAgB,SAACD,GAAD,OAAkBA,EAAaD,cAAcrG,SAG/D,OAAO,WAAQyG,EAAIf,iBAClB,IAEH,IJjC8BgB,EIiCxBC,GJjCwBD,EIiCM,IAAIE,kBACtC,SAAC/D,GACC,OAAIA,EAAQ,IAAM,EACT3B,EAAa2F,SAEb3F,EAAa4F,aAGxB,SAACrE,EAAMsE,GACL,OAAOtE,GACL,KAAKvB,EAAa2F,SAKlB,KAAK3F,EAAa4F,UAChBC,EAAI1B,MAASA,EACb0B,EAAI5B,OAAS,GACb,MAEF,QACE4B,EAAI1B,MAAS,EACb0B,EAAI5B,OAAS,MJtDNzD,mBAAYgF,GACb,IIuEd,OACE,yBAAKvH,UAAWH,GAAG,aACjB,kBAAC,mBAAD,CAAkBsH,aAAcA,EAAcK,eAAgBA,EAC5CK,YAhBF,SAACC,EAA2BnG,GAC9C,OAAQmG,GACN,KAAK/F,EAAa2F,SAChB,OAAQ,kBAAC,EAAD,CAAc/F,KAAMA,EAAMoG,IAAKpG,EAAKxB,KAE9C,KAAK4B,EAAa4F,UAChB,OAAQ,kBAAC,EAAD,CAAchG,KAAMA,EAAMoG,IAAKpG,EAAKxB,GAAIwG,MAAI,IAEtD,QACE,OAAO,OAOmCqB,mBAAoBC,EAC9CC,eAAa,QK9DtBC,OATf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,GAAD,QCFcC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae2b00c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoTemplate\":\"TodoTemplate_TodoTemplate__35Yvp\",\"app-title\":\"TodoTemplate_app-title__t6W9A\",\"content\":\"TodoTemplate_content__3kWrU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoInsert\":\"TodoInsert_TodoInsert__1o5GV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoListItem\":\"TodoListItem_TodoListItem__24yR_\",\"even\":\"TodoListItem_even__3Di7x\",\"remove\":\"TodoListItem_remove__kyUq4\",\"checkbox\":\"TodoListItem_checkbox__g4Uc9\",\"text\":\"TodoListItem_text__gbP5_\",\"checked\":\"TodoListItem_checked__2JYVi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__fw5eL\"};","import { useState } from 'react';\nimport classNames from 'classnames/bind';\n\n// == Custom Hook ==============================================================\nexport function useStateOnly<T>(init?: T | null) {\n  const result = useState<T>(init!);\n  return result[0];\n}\n\n// == Style ====================================================================\ntype stylesT = {\n  readonly [key: string]: string;\n}\n\nexport function stylesBind(styles: stylesT) {\n  return classNames.bind(styles);\n}\n","import React from 'react';\nimport { stylesBind } from '../Tools/Tools';\nimport styles from './TodoTemplate.module.scss';\n\nconst cx = stylesBind(styles);\n\ninterface TodoTemplateProps {\n  children?: React.ReactNode\n}\ntype TodoTemplateT = React.FunctionComponent<TodoTemplateProps>\n\nconst TodoTemplate: TodoTemplateT = ({ children }) => {\n  return (\n    <div className={cx('TodoTemplate')}>\n      <div className={cx('app-title')}>Todo App</div>\n      <div className={cx('content')}>{children}</div>\n    </div>\n  );\n};\n\nexport default TodoTemplate;\n","import { List, Record } from \"immutable\";\n\ninterface TodoItemI {\n  id:      number;\n  text:    string;\n  checked: boolean;\n}\n\nexport const TodoItem: Record.Factory<TodoItemI> = Record({\n  id:      0,\n  text:    \"\",\n  checked: false,\n} as TodoItemI);\nexport type TodoItemT = Record<TodoItemI> & Readonly<TodoItemI>;\n\nexport type TodoItemsT = List<TodoItemT>;\n","import { List } from 'immutable';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { scan, map, publishReplay, refCount } from 'rxjs/operators';\nimport { TodoItem, TodoItemsT, TodoItemT } from '../Generic/TodoModel';\n\n// == Large Size Sample ========================================================\nconst largeItemSize = 2500;\nconst largeInitItems = List((() => {\n  const array = [];\n  for (let i = 0; i < largeItemSize; i++) {\n    array.push(new TodoItem({\n      id: i,\n      text: `Task ${i}`,\n      checked: false\n    }));\n  }\n  return array;\n})());\n\n\n// == Core Events ==============================================================\nconst update$ = new BehaviorSubject((todos: TodoItemsT) => todos);\nconst insert$ = new Subject<TodoItemT>();\nconst remove$ = new Subject<TodoItemT['id']>();\nconst toggle$ = new Subject<TodoItemT['id']>();\n\n\n// == Data =====================================================================\nlet nextId = largeItemSize + 1;\nconst todos$ = update$.pipe(\n  scan((todos, operation) => operation(todos), largeInitItems),\n\n  // cache\n  publishReplay(1),\n  refCount()\n);\n\n\n// == Events Implementation ====================================================\ninsert$.pipe(\n  map((todo) => (todos: TodoItemsT) => todos.push(todo))\n).subscribe(update$);\n\nremove$.pipe(\n  map((id)   => (todos: TodoItemsT) => todos.filter(todo => todo.id !== id))\n).subscribe(update$);\n\ntoggle$.pipe(\n  map((id)   => (todos: TodoItemsT) => todos.map(todo => todo.id === id\n    ? todo.set(\"checked\", !todo.checked)\n    : todo\n  ))\n).subscribe(update$);\n\n\n// == Interface ================================================================\nconst TodoService = {\n  initData: largeInitItems,\n  todos$: todos$,\n\n  onInsert: (text: TodoItemT['text']) => {\n    insert$.next(new TodoItem({\n      id:      nextId,\n      text:    text,\n      checked: false\n    }));\n    nextId++;\n  },\n  onRemove: (id: TodoItemT['id']) => remove$.next(id),\n  onToggle: (id: TodoItemT['id']) => toggle$.next(id)\n};\n\nexport default TodoService;\n","import React, { useState, useEffect } from 'react';\nimport { RecyclerListView, LayoutProvider } from 'recyclerlistview/web';\nimport { useStateOnly, stylesBind } from '../Tools/Tools';\nimport ListDataProvider from '../Tools/RecyclerProvider';\nimport { TodoItemT } from '../Generic/TodoModel';\nimport TodoService from '../Services/TodoService';\nimport ExternalScrollView from '../Layouts/ExternalScrollView';\nimport TodoListItem from './TodoListItem';\nimport styles from './TodoList.module.scss';\n\n/** Notice *********************************************************************\n * If it doesn't work, run the following command.\n * bash ../../patches/apply_patch.sh\n */\n\nconst cx = stylesBind(styles);\n\nenum ListViewType {\n  ODDITEMS  = 0,\n  EVENITEMS = 1\n}\n\nconst TodoList = () => {\n  const width = window.innerWidth;\n  const renderData = new ListDataProvider(\n    (r1: TodoItemT, r2: TodoItemT) => r1 !== r2\n  ).cloneWithRows(TodoService.initData);\n\n  const [dataProvider, setDataProvider] = useState(renderData);\n  useEffect(() => {\n    const sub = TodoService.todos$.subscribe((todos) => {\n      setDataProvider((dataProvider) => dataProvider.cloneWithRows(todos));\n      }\n    );\n    return () => { sub.unsubscribe(); };\n  }, []);\n\n  const layoutProvider = useStateOnly(new LayoutProvider(\n    (index) => {\n      if (index % 2 !== 0) {\n        return ListViewType.ODDITEMS;\n      } else {\n        return ListViewType.EVENITEMS;\n      }\n    },\n    (type, dim) => {\n      switch(type) {\n        case ListViewType.ODDITEMS: {\n          dim.width  = width; // 630.4 584\n          dim.height = 60;    // 55.2  54.4\n          break;\n        }\n        case ListViewType.EVENITEMS: {\n          dim.width  = width; // 630.4 584\n          dim.height = 60;    // 55.2  54.4\n          break;\n        }\n        default:\n          dim.width  = 0;\n          dim.height = 0;\n      }\n    }\n  ));\n\n  const rowRenderer = (viewType: React.ReactText, todo: TodoItemT) => {\n    switch (viewType) {\n      case ListViewType.ODDITEMS: {\n        return (<TodoListItem todo={todo} key={todo.id} />);\n      }\n      case ListViewType.EVENITEMS: {\n        return (<TodoListItem todo={todo} key={todo.id} even />);\n      }\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <div className={cx('TodoList')}>\n      <RecyclerListView dataProvider={dataProvider} layoutProvider={layoutProvider}\n                        rowRenderer={rowRenderer} externalScrollView={ExternalScrollView}\n                        canChangeSize\n      />\n    </div>\n  );\n};\n\nexport default React.memo(TodoList);\n","import React, { useState, useCallback, useRef } from 'react';\nimport { AiOutlinePlus } from 'react-icons/ai';\nimport { stylesBind } from '../Tools/Tools';\nimport TodoService from '../Services/TodoService';\nimport styles from './TodoInsert.module.scss';\n\nconst cx = stylesBind(styles);\n\nconst TodoInsert = () => {\n  const [value, setValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const onChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    setValue(e.currentTarget.value)\n  }, []);\n  const onSubmit = useCallback((e: React.FormEvent<HTMLFormElement>) => {\n    if (value === '') {\n      inputRef.current?.focus();\n    } else {\n      TodoService.onInsert(value);\n      setValue(''); // value Init\n    }\n\n    // submit's reload event blocking.\n    e.preventDefault();\n  }, [value]\n  );\n\n  return (\n    <form className={cx('TodoInsert')} onSubmit={onSubmit} >\n      <input\n        placeholder=\"Write Tasks!!\"\n        value={value}\n        onChange={onChange}\n        ref={inputRef}\n      />\n      <button type=\"submit\">\n        <AiOutlinePlus />\n      </button>\n    </form>\n  )\n}\n\nexport default TodoInsert;\n","import { BaseDataProvider } from 'recyclerlistview/dist/web/core/dependencies/DataProvider';\nimport { DataProvider } from 'recyclerlistview/web';\nimport { ObjectUtil } from \"ts-object-utils\";\nimport { List } from 'immutable';\n\n// == RecyclerListView DataProvinder ===========================================\n/***\n * You can create a new instance or inherit and override default methods\n * Allows access to data and size. Clone with rows creates a new data provider and let listview know where to calculate row layout from.\n *\n * Customized: https://github.com/Flipkart/recyclerlistview/blob/master/src/core/dependencies/DataProvider.ts\n *\n * Notice!!!\n * If it doesn't work, run the following command.\n * bash ../../patches/apply_patch.sh\n * */\n\nexport abstract class GenericDataProvider<T, K = keyof T> extends BaseDataProvider{\n  public rowHasChanged: (r1: T | any, r2: T | any) => boolean;\n\n  // In JS context make sure stable id is a string\n  public getStableId: (index: number) => string;\n  protected m_firstIndexToProcess: number = 0;\n  protected m_size: number = 0;\n  protected m_data: K | any = List<T>([]);\n  protected m_hasStableIds = false;\n  protected m_requiresDataChangeHandling = false;\n\n  constructor(rowHasChanged: (r1: T | any, r2: T | any) => boolean,\n              getStableId?:  (index: number) => string) {\n    super(rowHasChanged, getStableId);\n    this.rowHasChanged = rowHasChanged;\n    if (getStableId) {\n      this.getStableId = getStableId;\n      this.m_hasStableIds = true;\n    } else {\n      this.getStableId = (index) => index.toString();\n    }\n  }\n\n  public abstract newInstance(\n    rowHasChanged: (r1: T, r2: T) => boolean,\n    getStableId?: (index: number) => string    ): GenericDataProvider<T, K>;\n  public abstract getDataForIndex(index: number): T | undefined;\n  public abstract cloneWithRows(newData: K | any,\n                    firstModifiedIndex?: number): DataProvider;\n\n  public getAllData(): K | any {\n    return this.m_data;\n  }\n\n  public getSize(): number {\n    return this.m_size;\n  }\n\n  public hasStableIds(): boolean {\n    return this.m_hasStableIds;\n  }\n\n  public requiresDataChangeHandling(): boolean {\n    return this.m_requiresDataChangeHandling;\n  }\n\n  public getFirstIndexToProcessInternal(): number {\n    return this.m_firstIndexToProcess;\n  }\n}\n\n// == RecyclerListView Dataprovider with IMMUTABLE.JS ==========================\nexport abstract class ListBaseDataProvider<T> extends GenericDataProvider<T, List<T>> {\n  public abstract newInstance(\n    rowHasChanged: (r1: T, r2: T)  => boolean,\n    getStableId?:  (index: number) => string  ): ListBaseDataProvider<T>;\n\n  public getDataForIndex(index: number): T | undefined {\n    return this.m_data.get(index);\n  }\n\n  // Fast Matching Lists\n  private getFirstIndexChange(newData: List<T>, newSize: number): number {\n    if(this.m_data.equals(newData)) {\n      return this.m_size;\n    }\n\n    if(this.m_size > newSize) {\n      const sizeData = newData.setSize(this.m_size);\n      return (this.m_data as List<T>)\n        .findIndex((value, index) => this.rowHasChanged(value, sizeData.get(index)));\n    } else {\n      const sizeData = this.m_data.setSize(newSize);\n      return (sizeData as List<T>)\n        .findIndex((value, index) => this.rowHasChanged(value, newData.get(index )));\n    }\n  }\n\n  //No need to override this one\n  //If you already know the first row where rowHasChanged will be false pass it upfront to avoid loop\n  public cloneWithRows(newData: List<T>, firstModifiedIndex?: number): DataProvider {\n    const dp        = this.newInstance(this.rowHasChanged, this.getStableId);\n    const newSize   = newData.size;\n\n    dp.m_firstIndexToProcess = ObjectUtil.isNullOrUndefined(firstModifiedIndex)\n                            ? this.getFirstIndexChange(newData, newSize)\n                            : Math.max(Math.min(firstModifiedIndex, this.m_data.size), 0);\n\n    if (dp.m_firstIndexToProcess !== this.m_data.size) {\n      dp.m_requiresDataChangeHandling = true;\n    }\n    dp.m_data = newData;\n    dp.m_size = newSize;\n    return dp;\n  }\n}\n\nexport default class ListDataProvider<T> extends ListBaseDataProvider<T> {\n  public newInstance(rowHasChanged: (r1: T, r2: T)  => boolean,\n                     getStableId?: ((index: number) => string) | undefined): ListBaseDataProvider<T> {\n                       return new ListDataProvider(rowHasChanged, getStableId);\n                     }\n}\n","import React, { createRef } from 'react';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { ScrollViewDefaultProps } from 'recyclerlistview/dist/web/core/scrollcomponent/BaseScrollView';\nimport ScrollViewer from 'recyclerlistview/dist/web/platform/web/scrollcomponent/ScrollViewer';\n\n// Response\nconst rem     = 16;\nconst remRate = 40;\nconst vwRate  = 0.8;\nconst laptop  = 1280;\n\nconst marginRate = 3;\n\n// Event\nconst resize$ = fromEvent(window, \"resize\");\n\n// https://codesandbox.io/s/r59m96851q?file=/src/Hello.js\ninterface scrollInputProps {\n  x: number;\n  y: number;\n  animated: boolean;\n}\nclass ExternalScrollview extends React.Component<ScrollViewDefaultProps, {}> {\n  resize?: Subscription;\n  componentDidMount() {\n    this.resize = resize$.subscribe(this.handleLayout);\n  }\n\n  componentWillUnmount() {\n    this.resize!.unsubscribe();\n  }\n\n  handleLayout = (e: Event) => {\n    const windowWidth = window.innerWidth;\n    const ScrollWidth = windowWidth >= laptop\n                      ? rem         * remRate - marginRate\n                      : windowWidth * vwRate  - marginRate;\n    this.props.onSizeChanged({\n      height: window.innerHeight,\n      width:  ScrollWidth\n    });\n  };\n\n  scrollRef = createRef<ScrollViewer>();\n  scrollTo = (arg: scrollInputProps) => {\n    this.scrollRef.current?.scrollTo(arg);\n  };\n  render() {\n    return <ScrollViewer ref={this.scrollRef} {...this.props} />;\n  }\n}\n\nexport default ExternalScrollview;\n","import React, { useCallback } from 'react';\nimport { IoMdCheckmarkCircleOutline, IoIosRadioButtonOff } from 'react-icons/io';\nimport { BsTrash } from 'react-icons/bs';\nimport { stylesBind } from '../Tools/Tools';\nimport { TodoItemT } from '../Generic/TodoModel';\nimport TodoService from '../Services/TodoService';\nimport styles from './TodoListItem.module.scss';\n\nconst cx = stylesBind(styles);\n\ninterface TodoListItemProps {\n  todo: TodoItemT;\n  key:  TodoItemT['id'];\n  even?: true | undefined;\n}\n\nconst TodoListItem = ({ todo, even }: TodoListItemProps) => {\n  const { id, text, checked } = todo;\n  const onRemoveDown = useCallback(() => TodoService.onRemove(id), [id]);\n  const onToggleDown = useCallback(() => TodoService.onToggle(id), [id]);\n\n  return (\n    <div className={cx('TodoListItem', { even })}>\n      <div className={cx('checkbox', { checked })} onPointerDown={onToggleDown} >\n        {checked ? <IoMdCheckmarkCircleOutline /> : <IoIosRadioButtonOff /> }\n        <div className={cx('text')}>{text}</div>\n      </div>\n      <div className={cx('remove')} onPointerDown={onRemoveDown} >\n        <BsTrash />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(TodoListItem);\n","import React from 'react';\nimport TodoTemplate from './Layouts/TodoTemplate';\nimport TodoInsert from './Components/TodoInsert';\nimport TodoList from './Components/TodoList';\n\n/** Notice *********************************************************************\n * If it doesn't work, run the following command.\n * bash ../../patches/apply_patch.sh\n */\n\nfunction App() {\n  return (\n    <TodoTemplate>\n      <TodoInsert />\n      <TodoList />\n    </TodoTemplate>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './Generic/normalize.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}