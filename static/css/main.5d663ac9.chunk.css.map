{"version":3,"sources":["main.5d663ac9.chunk.css","TodoTemplate.module.scss","../Tools/Tools.scss","../Settings/Fonts.scss","../Settings/Layouts.scss","../Settings/Colors.scss","../../node_modules/fluid-size/_fluid-size.scss","../../node_modules/sass-unitconverter/_unitconverter.scss","../../node_modules/include-media-or/dist/_include-media.scss","TodoInsert.module.scss","TodoListItem.module.scss","TodoList.module.scss"],"names":[],"mappings":"AAEA,sHAAsH,CCKtH,kCCwEE,qBAAsB,CAtCtB,YAHsB,CA4GtB,kBAAmB,CApInB,+BAAiC,CACjC,kCAAsC,CACtC,iCAAoC,CACpC,8BAAkD,CAClD,iCAA6C,CAC7C,mCAAiC,CAAjC,2BAAiC,CAAjC,mBAAiC,CACjC,6BAAiC,CDTjC,qCERoC,CFSpC,eEDc,CFEd,YGZiB,CHajB,aIGoB,CJFpB,wBIRmB,CJArB,iEC0BE,oBAAoB,CA4NpB,kBAAmB,CIrHf,+BAnDkD,CLhEpD,iCEjB8B,CFkB9B,eEPY,CFQZ,iBAAmB,CACnB,YAAiC,CACjC,eGvBc,CHwBf,gCAnBH,iEKyIU,cC4IiB,CNlQxB,COqhBC,yBPxiBJ,iEK+IQ,sCAjEgD,CL3DrD,COqhBC,yBPxiBJ,iEK+IQ,oCAjEgD,CL3DrD,COqhBC,0BPxiBJ,iEK+IQ,oCAjEgD,CL3DrD,COqhBC,gCPxiBJ,iEKyIU,cC4IiB,CNlQxB,CAnBH,+DCkBE,eAAgB,CI+GZ,gCAnDkD,CLhDpD,SAAU,CACX,gCA/BH,+DKyIU,cC4IiB,CNtPxB,COygBC,yBPxiBJ,+DK+IQ,sCAjEgD,CL/CrD,COygBC,yBPxiBJ,+DK+IQ,mCAjEgD,CL/CrD,COygBC,0BPxiBJ,+DK+IQ,oCAjEgD,CL/CrD,COygBC,+BPxiBJ,+DKyIU,cC4IiB,CNtPxB,COygBC,0BPxiBJ,+DAwBM,WAAY,CAOf,COygBC,yBPxiBJ,+DA2BM,eAAiB,CACjB,gBAAiB,CAGpB,CQhCH,8BP2BE,oBAAoB,CAQpB,YAHsB,CA+BtB,kBAAmB,CO5DnB,WAAmB,CACnB,wBJoBkB,CInBlB,kBLAkB,CKClB,mBAAqB,CANvB,oCP2BE,oBAAoB,CAmPpB,WOpQ8B,CAC5B,eAAiB,CACjB,YAAiB,CACjB,WAAiB,CACjB,SAAgB,CAChB,iBLZoB,CKHxB,qCHkIM,gCAnDkD,CGpDpD,aJ1BiB,CI2BjB,wBP5BkC,CO6BlC,cAAyB,CACzB,YAAsB,CACtB,WAAsB,CACtB,6BATiB,CAUjB,kBAAkC,CAClC,mBAZuC,CAiBxC,gCAvCH,qCH0IU,gBC4IiB,CE/OxB,CDkgBC,yBCziBJ,qCHgJQ,sCAjEgD,CGxCrD,CDkgBC,yBCziBJ,qCHgJQ,kCAjEgD,CGxCrD,CDkgBC,0BCziBJ,qCHgJQ,mCAjEgD,CGxCrD,CDkgBC,gCCziBJ,qCH0IU,gBC4IiB,CE/OxB,CAvCH,2CAqCM,wBPrCgC,CQCtC,kCR8DE,kBAAmB,CAyDnB,6BAA8B,CArF9B,YAHsB,CA4GtB,kBAAmB,CQvInB,cAAmB,CACnB,UAAgB,CAChB,WAAgB,CAChB,4BRLmC,CQFrC,2DASI,wBRPiC,CQQlC,0BAVH,sCAcM,iBAAkB,CAdxB,4CAkBQ,kBAAmB,CACpB,CAnBP,8DAwBI,aAAkC,CAxBtC,kEJiIM,gCAnDkD,CIlDlD,aR7BgC,CQ8BjC,gCA7BL,kEJyIU,gBC4IiB,CGxPtB,CF2gBD,yBExiBJ,kEJ+IQ,sCAjEgD,CIjDnD,CF2gBD,yBExiBJ,kEJ+IQ,kCAjEgD,CIjDnD,CF2gBD,0BExiBJ,kEJ+IQ,mCAjEgD,CIjDnD,CF2gBD,gCExiBJ,kEJyIU,gBC4IiB,CGxPtB,CA7BL,wEAgCQ,aRjC8B,CQCtC,gER8DE,kBAAmB,CA5BnB,YAHsB,CA4GtB,kBAAmB,CAkInB,WQrO8B,CAC5B,aAAkC,CAzCtC,oEJiIM,iCAnDkD,CIhClD,kBAAmB,CACnB,aRhDgC,CQiDjC,+BAhDL,oEJyIU,gBC4IiB,CGrOtB,CFwfD,yBExiBJ,oEJ+IQ,sCAjEgD,CI9BnD,CFwfD,yBExiBJ,oEJ+IQ,oCAjEgD,CI9BnD,CFwfD,0BExiBJ,oEJ+IQ,oCAjEgD,CI9BnD,CFwfD,+BExiBJ,oEJyIU,gBC4IiB,CGrOtB,CAhDL,0FAkDM,iBNhDkB,CMFxB,0EAuDQ,aRxD8B,CQCtC,gGA0DQ,aR3D8B,CQCtC,gGAiEQ,aLtEM,CKKd,sHAoEQ,aL7CY,CK8CZ,4BAA6B,CArErC,sGAyEU,aR1E4B,CQCtC,4HA4EU,aR7E4B,CSFtC,0BTqBE,eAAgB,CSnBhB,WAAmB,CACnB,kBPIkB","file":"main.5d663ac9.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@500&family=Noto+Serif+KR:wght@900&display=swap);\n@import url(https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@500&family=Noto+Serif+KR:wght@900&display=swap);\n@import url(https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@500&family=Noto+Serif+KR:wght@900&display=swap);\n.TodoTemplate_TodoTemplate__35Yvp{display:flex;flex-direction:column;display:flex;align-items:center;-webkit-text-stroke-width:0.04px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-shadow:0px 0px 0.001px #ACACAC;text-rendering:geometricPrecision;font-feature-settings:\"kern\", normal;-webkit-font-kerning:normal;font-kerning:normal;font-variant-ligatures:normal;font-family:\"Noto Sans KR\",sans-serif;font-weight:500;height:100vh;color:#1C1C1C;background-color:#F7F7F7}.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_app-title__t6W9A{contain:strict style;align-self:stretch;font-size:calc(1.998vw + 3.5em);font-family:\"Noto Serif KR\",serif;font-weight:900;text-align:center;padding:1rem;max-height:50vh}@media (min-width: 1201.20123px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_app-title__t6W9A{font-size:80px}}@media (min-width: 480px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_app-title__t6W9A{font-size:calc(-3.32555vw + 5.09706em)}}@media (min-width: 768px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_app-title__t6W9A{font-size:calc(.49127vw + 3.26499em)}}@media (min-width: 1280px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_app-title__t6W9A{font-size:calc(.45725vw + 3.29221em)}}@media (min-width: 2962.93642px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_app-title__t6W9A{font-size:80px}}.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{contain:content;font-size:calc(.74022vw + 1.3em);width:80%}@media (min-width: 1513.05665px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{font-size:32px}}@media (min-width: 480px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{font-size:calc(-1.23474vw + 1.89249em)}}@media (min-width: 768px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{font-size:calc(.1824vw + 1.21226em)}}@media (min-width: 1280px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{font-size:calc(.16977vw + 1.22236em)}}@media (min-width: 3310.8141px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{font-size:32px}}@media (min-width: 1280px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{width:40rem}}@media (min-width: 768px){.TodoTemplate_TodoTemplate__35Yvp .TodoTemplate_content__3kWrU{margin-left:30%;margin-right:30%}}\n\n.TodoInsert_TodoInsert__1o5GV{contain:strict style;display:flex;flex-direction:row;height:3rem;border:2px solid #828293;border-radius:10px;margin-bottom:0.3rem}.TodoInsert_TodoInsert__1o5GV input{contain:strict style;flex-grow:1;background:none;outline:none;border:none;width:80%;margin-left:.5rem}.TodoInsert_TodoInsert__1o5GV button{font-size:calc(.79629vw + 1.4em);color:#F7F7F7;background-color:#8d8d9c;cursor:pointer;outline:none;border:none;border-radius:1px 7px 7px 1px;padding-left:.9rem;padding-right:.8rem}@media (min-width: 1406.51585px){.TodoInsert_TodoInsert__1o5GV button{font-size:33.6px}}@media (min-width: 480px){.TodoInsert_TodoInsert__1o5GV button{font-size:calc(-1.32951vw + 2.03774em)}}@media (min-width: 768px){.TodoInsert_TodoInsert__1o5GV button{font-size:calc(.1964vw + 1.3053em)}}@media (min-width: 1280px){.TodoInsert_TodoInsert__1o5GV button{font-size:calc(.1828vw + 1.31618em)}}@media (min-width: 3190.39616px){.TodoInsert_TodoInsert__1o5GV button{font-size:33.6px}}.TodoInsert_TodoInsert__1o5GV button:hover{background-color:#afafba}\n\n.TodoListItem_TodoListItem__24yR_{display:flex;flex-direction:row;display:flex;justify-content:space-between;display:flex;align-items:center;cursor:pointer;width:100%;height:100%;border-top:1px solid #e8e8e8}.TodoListItem_TodoListItem__24yR_.TodoListItem_even__3Di7x{background-color:#f2f2f2}@media (min-width: 1280px){.TodoListItem_TodoListItem__24yR_ svg{visibility:hidden}.TodoListItem_TodoListItem__24yR_:hover svg{visibility:visible}}.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4{padding:.7rem}.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4 svg{font-size:calc(.79629vw + 1.4em);color:#f90017}@media (min-width: 1406.51585px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4 svg{font-size:33.6px}}@media (min-width: 480px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4 svg{font-size:calc(-1.32951vw + 2.03774em)}}@media (min-width: 768px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4 svg{font-size:calc(.1964vw + 1.3053em)}}@media (min-width: 1280px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4 svg{font-size:calc(.1828vw + 1.31618em)}}@media (min-width: 3190.39616px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4 svg{font-size:33.6px}}.TodoListItem_TodoListItem__24yR_ .TodoListItem_remove__kyUq4:hover svg{color:#ff4152}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9{display:flex;flex-direction:row;display:flex;align-items:center;flex-grow:1;padding:.3rem}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9 svg{font-size:calc(1.02752vw + 1.8em);visibility:visible;color:#b9b9c2}@media (min-width: 778.57092px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9 svg{font-size:36.8px}}@media (min-width: 480px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9 svg{font-size:calc(-1.71028vw + 2.62134em)}}@media (min-width: 768px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9 svg{font-size:calc(.25265vw + 1.67913em)}}@media (min-width: 1280px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9 svg{font-size:calc(.23516vw + 1.69313em)}}@media (min-width: 2488.0597px){.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9 svg{font-size:36.8px}}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9 .TodoListItem_text__gbP5_{margin-left:.5rem}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9:hover svg{color:#c4c4cc}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9:hover .TodoListItem_text__gbP5_{color:#454545}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9.TodoListItem_checked__2JYVi svg{color:#00DAC6}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9.TodoListItem_checked__2JYVi .TodoListItem_text__gbP5_{color:#828293;text-decoration:line-through}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9.TodoListItem_checked__2JYVi:hover svg{color:#00e9d4}.TodoListItem_TodoListItem__24yR_ .TodoListItem_checkbox__g4Uc9.TodoListItem_checked__2JYVi:hover .TodoListItem_text__gbP5_{color:#9292a1}\n\n.TodoList_TodoList__fw5eL{contain:content;height:80vh;border-radius:10px}\n\n\n\n","@import '~include-media-or/dist/include-media';\n@import '~fluid-size/fluid-size';\n@import '../Settings/Colors.scss';\n@import '../Settings/Fonts.scss';\n@import '../Settings/Layouts.scss';\n@import '../Tools/Tools.scss';\n\n.TodoTemplate {\n  @include flex-container-start-top;\n  @include flex-container-alignY-center;\n  @include font-legibility;\n  font-family:      $notoSans;\n  font-weight:      $medium;\n  height:           $full-height;\n  color:            $black;\n  background-color: $white;\n\n  .app-title {\n    @include container-all;\n    @include flex-item-alignY-fill;\n    @include font-size($header-font-size, $header-font-max-size);\n    font-family: $notoSerif;\n    font-weight: $heavy;\n    text-align:  center;\n    padding:     $default-padding * 2;\n    max-height:  $half-height;\n  }\n  .content {\n    @include container;\n    @include font-size($default-font-size, $default-font-max-size);\n    @include media(\">=laptop\") {\n      width: 40rem;\n    }\n    @include media(\">=tablet\") {\n      margin-left:  30%;\n      margin-right: 30%;\n    }\n    width: 80%;\n  }\n}\n","@import '~include-media-or/dist/include-media';\n@import '../Settings/Layouts.scss';\n\n// ** Basics *******************************************************************\n// == Color ====================================================================\n@function lightColor($color, $amount: 0) {\n  @return lighten($color, 2 * $amount);\n}\n@function darkColor($color, $amount: 0) {\n  @return darken($color, 2 * $amount);\n}\n\n// == Font =====================================================================\n@mixin font-legibility() {\n  -webkit-text-stroke-width: 0.04px;\n  -webkit-font-smoothing:    antialiased;\n  -moz-osx-font-smoothing:   grayscale;\n  text-shadow:               0px 0px 0.001px #ACACAC;\n  text-rendering:            geometricPrecision;\n  font-kerning:              normal;\n  font-variant-ligatures:    normal;\n}\n\n// ** Container ****************************************************************\n@mixin container() {\n  contain: content;\n}\n\n@mixin container-strict() {\n  contain: strict;\n}\n\n@mixin container-all() {\n  contain:strict style;\n}\n\n// ** Flex *********************************************************************\n// == Flex Container ===========================================================\n$DEFAULT-FLEX-MODE: flex;\n\n@mixin flex-container($mode: $DEFAULT-FLEX-MODE) {\n  display: $mode;\n}\n\n@mixin flex-container-all($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n\n  &:nth-child(1) {\n    @include flex-container($mode);\n  }\n}\n\n@mixin flex-container-inline() {\n  @include flex-container(inline-flex);\n}\n\n// alias\n@mixin flex-container-fit() {\n  @include flex-container-inline();\n}\n\n// -- Flex Container Start -----------------------------------------------------\n@mixin flex-container-flow($direction: row, $wrap: nowrap) {\n  flex-flow: $direction $wrap;\n}\n\n// -- Flex Container Start -----------------------------------------------------\n@mixin flex-container-start-left($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  flex-direction: row;\n}\n\n@mixin flex-container-start-right($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  flex-direction: row-reverse;\n}\n\n@mixin flex-container-start-top($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  flex-direction: column;\n}\n\n@mixin flex-container-start-bottom($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  flex-direction: column-reverse;\n}\n\n// -- Flex Container Line ------------------------------------------------------\n@mixin flex-container-line-single($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  flex-wrap: nowrap;\n}\n\n@mixin flex-container-line-multi($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  flex-wrap: wrap;\n}\n\n@mixin flex-container-line-multi-reverseY($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  flex-wrap: wrap-reverse;\n}\n\n// -- Flex Container Align -----------------------------------------------------\n@mixin flex-container-alignX-start($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  justify-content: flex-start;\n}\n\n@mixin flex-container-alignX-end($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  justify-content: flex-end;\n}\n\n@mixin flex-container-alignX-center($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  justify-content: center;\n}\n\n@mixin flex-container-alignX-fill($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  justify-content: stretch;\n}\n\n@mixin flex-container-alignX-edge($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  justify-content: space-between;\n}\n\n@mixin flex-container-alignX-uniform($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  justify-content: space-around;\n}\n\n@mixin flex-container-alignY-start($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  align-items: flex-start;\n}\n\n@mixin flex-container-alignY-end($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  align-items: flex-end;\n}\n\n@mixin flex-container-alignY-center($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  align-items: center;\n}\n\n@mixin flex-container-alignY-baseline($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  align-items: baseline;\n}\n\n@mixin flex-container-alignY-fill($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  align-items: stretch;\n}\n\n@mixin flex-container-alignY-edge($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  align-content: space-between;\n}\n\n@mixin flex-container-alignY-uniform($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container($mode);\n  align-content: space-around;\n}\n\n@mixin flex-container-alignY-multi-start($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-line-multi($mode);\n  align-content: flex-start;\n}\n\n@mixin flex-container-alignY-multi-end($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-line-multi($mode);\n  align-content: flex-end;\n}\n\n@mixin flex-container-alignY-multi-center($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-line-multi($mode);\n  align-content: center;\n}\n\n@mixin flex-container-alignY-multi-fill($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-line-multi($mode);\n  align-content: stretch;\n}\n\n@mixin flex-container-alignY-multi-edge($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-line-multi($mode);\n  align-content: space-between;\n}\n\n@mixin flex-container-alignY-multi-uniform($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-line-multi($mode);\n  align-items: space-around;\n}\n\n// Alias\n@mixin flex-container-alignX-center-edge($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-alignX-edge($mode);\n}\n\n@mixin flex-container-alignX-center-uniform($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-alignX-uniform($mode);\n}\n\n@mixin flex-container-alignY-center-edge($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-alignY-edge($mode);\n}\n\n@mixin flex-container-alignY-center-uniform($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-alignY-uniform($mode);\n}\n\n@mixin flex-container-alignY-multi-center-edge($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-alignY-multi-edge($mode);\n}\n\n@mixin flex-container-alignY-multi-center-uniform($mode: $DEFAULT-FLEX-MODE) {\n  @include flex-container-alignY-multi-uniform($mode);\n}\n\n\n// == Flex Item ================================================================\n$DEFAULT-FLEX-ORDER: 0;\n$DEFAULT-FLEX-SIZE: auto;\n$DEFAULT-FLEX-GROW: 0;\n$DEFAULT-FLEX-SHRINK: 1;\n\n@mixin flex-item($grow: $DEFAULT-FLEX-GROW, $shrink: $DEFAULT-FLEX-SHRINK, $basis: $DEFAULT-FLEX-SIZE) {\n  flex: $grow, $shrink, $basis;\n}\n\n// -- Flex Item Align ----------------------------------------------------------\n@mixin flex-item-alignY-start() {\n  align-self: flex-start;\n}\n\n@mixin flex-item-alignY-end() {\n  align-self: flex-end;\n}\n\n@mixin flex-item-alignY-center() {\n  align-self: center;\n}\n\n@mixin flex-item-alignY-baseline() {\n  align-self: baseline;\n}\n\n@mixin flex-item-alignY-fill() {\n  align-self: stretch;\n}\n\n// -- Flex Item Order ----------------------------------------------------------\n@mixin flex-item-order($order: $DEFAULT-FLEX-ORDER) {\n  order: $order;\n}\n\n@mixin flex-item-order-decrease($order: $DEFAULT-FLEX-ORDER) {\n  order: - $order;\n}\n\n// Alias\n@mixin flex-item-order-increase($order: $DEFAULT-FLEX-ORDER) {\n  @include flex-item-order($order);\n}\n\n// -- Flex Item Size -----------------------------------------------------------\n@mixin flex-item-size($size: $DEFAULT-FLEX-SIZE) {\n  flex-basis: $size;\n}\n\n@mixin flex-item-size-up($rate: $DEFAULT-FLEX-GROW) {\n  flex-grow: $rate;\n}\n\n@mixin flex-item-size-down($rate: $DEFAULT-FLEX-SHRINK) {\n  flex-shrink: $rate;\n}\n\n// Alias\n@mixin flex-item-size-increase($rate: $DEFAULT-FLEX-GROW) {\n  @include flex-item-size-up($rate);\n}\n\n@mixin flex-item-size-decrease($rate: $DEFAULT-FLEX-SHRINK) {\n  @include flex-item-size-down($rate);\n}\n","// == Family ===================================================================\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@500&family=Noto+Serif+KR:wght@900&display=swap');\n\n$notoSans:  'Noto Sans KR', sans-serif;\n$notoSerif: 'Noto Serif KR', serif;\n\n// == Weight ===================================================================\n$thin:       100;\n$ultraLight: 200;\n$light:      300;\n$regular:    400;\n$medium:     500;\n$semiBold:   600;\n$bold:       700;\n$extraBold:  800;\n$heavy:      900;\n\n// == Size =====================================================================\n$default-font-size:   1.3rem;\n$default-font-max-size: 2rem;\n\n$header-font-size:   3.5rem;\n$header-font-max-size: 5rem;\n","// ** Positon ******************************************************************\n$full-height: 100vh;\n$half-height: 50vh;\n\n$full-width: 100wh;\n$half-width: 50wh;\n\n// ** Shape ********************************************************************\n$default-padding: 0.5rem;\n$default-margin:  0.5rem;\n\n$default-round: 10px;\n\n// ** Break Point **************************************************************\n$high-desktop-width:  2560px;\n$high-desktop-height: 1440px;\n\n$desktop-width:  1920px;\n$desktop-height: 1080px;\n\n$laptop-width:  1280px;\n$laptop-height: 720px;\n\n$tablet-width:  768px;\n$tablet-height: 1024px;\n\n$phone-width:  480px;\n$phone-height: 854px;\n\n$breakpoints: (        // px\n  phone:        $phone-width,\n  tablet:       $tablet-width,\n  laptop:       $laptop-width,\n  desktop:      $desktop-width,\n  high-desktop: $high-desktop-width\n);\n\n$breakpoints-height: ( // px\n  phone:        $phone-height,\n  tablet:       $tablet-height,\n  laptop:       $laptop-height,\n  desktop:      $desktop-height,\n  high-desktop: $high-desktop-height\n);\n\n$screen-sizes: (       // inch\n  phone:        5,\n  tablet:       10.2,\n  laptop:       14,\n  desktop:      24,\n  high-desktop: 27\n);\n\n$screen-distances: (   // 10cm\n  phone:        3,\n  tablet:       4,\n  laptop:       5,\n  desktop:      6,\n  high-desktop: 6\n);\n\n// Alias\n$high-desktop: $high-desktop-width;\n$desktop:      $desktop-width;\n$laptop:       $laptop-width;\n$tablet:       $tablet-width;\n$phone:        $phone-width;\n","@import '../Tools/Tools.scss';\n\n$cyan: #00DAC6;\n$red: #DA0014;\n$primary-color: $cyan;\n\n// ** GreyScale *****************************************************************\n$white:       #F7F7F7;\n$realWhite:   #FFFFFF;\n$lightWhite:  lightColor($white, 1);\n$darkWhite:   darkColor($white, 1);\n$darkx2White: darkColor($white, 2);\n$darkx3White: darkColor($white, 3);\n$darkx4White: darkColor($white, 4);\n$darkx5White: darkColor($white, 5);\n\n\n$black:        #1C1C1C;\n$realBlack:    #000000;\n$lightBlack:   lightColor($black, 1);\n$lightx2Black: lightColor($black, 2);\n$lightx3Black: lightColor($black, 3);\n$lightx4Black: lightColor($black, 4);\n$lightx5Black: lightColor($black, 5);\n$darkBlack:    darkColor($black, 1);\n$darkx2Black:  darkColor($black, 2);\n$darkx3Black:  darkColor($black, 3);\n$darkx4Black:  darkColor($black, 4);\n$darkx5Black:  darkColor($black, 5);\n\n$lightGrey:  #828293;\n$mediumGrey: #707070;\n$darkGrey:   #555555;\n","@import '~include-media-or/dist/include-media';\n@import '~mathsass/dist/math';\n@import '~sass-unitconverter/unitconverter';\n@import 'utils';\n\n// == Fluid Size ===============================================================\n$DEFAULT-BREAK: default !default;\n$DEFAULT-SIZE:  16px    !default;\n\n@function zip-responsive() {\n  @return zip(\n    map-values($screen-distances), map-values($screen-sizes      ),\n    map-values($breakpoints     ), map-values($breakpoints-height)\n  );\n}\n\n@function calc-ppi($screen-width, $screen-height, $screen-size) {\n  @return sqrt(pow($screen-width, 2) + pow($screen-height, 2)) / $screen-size;\n}\n\n@function calc-angle($size) {\n  $size:     num(px($size));\n  $values:   zip-responsive();\n  $smallest: null;\n\n  @each $value in $values {\n    $screen-distance: nth($value, 1) * 100;\n    $screen-size:     nth($value, 2);\n    $screen-width:    num(nth($value, 3));\n    $screen-height:   num(nth($value, 4));\n\n    $ppi: calc-ppi($screen-width, $screen-height, $screen-size);\n    $independent-value: $screen-distance * $ppi;\n    @if (($smallest == null) or ($smallest > $independent-value)) {\n      $smallest: $independent-value;\n    }\n  }\n\n  $angle: $size * 54 / $smallest;\n  $visual-angle: atan($angle) * (10800 / $PI);\n  @return count-round($visual-angle, 2);\n}\n\n@function calc-size($visual-angle) {\n  $values:      zip-responsive();\n  $break-sizes: ();\n\n  @each $value in $values {\n    $screen-distance: nth($value, 1) * 100;\n    $screen-size:     nth($value, 2);\n    $screen-width:    num(nth($value, 3));\n    $screen-height:   num(nth($value, 4));\n\n    $ppi: calc-ppi($screen-width, $screen-height, $screen-size);\n    $angle: tan($PI * $visual-angle / 10800);\n    $size: $screen-distance * $angle * $ppi / 54;\n\n    $break-sizes: append($break-sizes, ($size));\n  }\n\n  @return $break-sizes;\n}\n\n// https://www.madebymike.com.au/writing/fluid-type-calc-examples/\n@function fluid-rate($start-size, $end-size, $min-screen, $max-screen) {\n  @return ($end-size - $start-size) / ($max-screen - $min-screen);\n}\n@function fluid-basic-size($start-size, $min-screen, $rate) {\n  @return $start-size - $rate * $min-screen;\n}\n\n@function fluid-size($start-size, $end-size, $min-screen, $max-screen) {\n  $start-size: em($start-size);\n  $end-size:   em($end-size);\n  $min-screen: em($min-screen);\n  $max-screen: em($max-screen);\n\n  $rate: fluid-rate($start-size, $end-size, $min-screen, $max-screen);\n  $basic-size: fluid-basic-size($start-size, $min-screen, $rate);\n\n  $sign: \"+\";\n  @if ($basic-size < 0) {\n    $sign: \"-\";\n    $basic-size: abs($basic-size);\n  }\n  @return calc(#{$rate*100}vw #{$sign} #{$basic-size});\n}\n@function fluid-limit-break($start-size, $end-size, $max-size,\n$min-screen, $max-screen) {\n  $start-size: px($start-size);\n  $end-size:   px($end-size);\n  $max-size:   px($max-size);\n  $min-screen: px($min-screen);\n  $max-screen: px($max-screen);\n\n  $rate: fluid-rate($start-size, $end-size, $min-screen, $max-screen);\n  $basic-size: fluid-basic-size($start-size, $min-screen, $rate);\n\n  @return ($max-size - $basic-size) / $rate;\n}\n\n@mixin fluid-media($property, $sizes, $max-size: null) {\n  $fluid-sizes: to-unit-map($sizes, px);\n  $fluid-breakpoints: map-merge(($DEFAULT-BREAK: 0px), to-unit-map($breakpoints, px));\n  $fluid-breakpoints: map-sort-values($fluid-breakpoints);\n  @if not map-has-key($fluid-sizes, $DEFAULT-BREAK) {\n    $default-map: ($DEFAULT-BREAK: $DEAFULT-SIZE);\n    $fluid-sizes: map-merge($default-map, $fluid-sizes);\n  }\n  $limit-break: null;\n\n  $first-size: 1;\n  $last-size: length($fluid-breakpoints) - 1;\n  @each $i in range($last-size) {\n    $now-key:  map-nth($fluid-breakpoints, $i);\n    $next-key: map-nth($fluid-breakpoints, $i + 1);\n\n    $now-size:   map-get($fluid-sizes, $now-key );\n    $next-size:  map-get($fluid-sizes, $next-key);\n    $now-break:  map-get($fluid-breakpoints, $now-key );\n    $next-break: map-get($fluid-breakpoints, $next-key);\n\n    @if ($max-size != null) {\n      $limit-break: fluid-limit-break($now-size,  $next-size, $max-size,\n      $now-break, $next-break);\n      @if $limit-break < 0 {\n        $limit-break: 0px;\n      }\n\n      $max-size:  px($max-size);\n      $now-size:  if($now-size  > $max-size, $max-size, $now-size );\n      $next-size: if($next-size > $max-size, $max-size, $next-size);\n    }\n\n    $fluid-size: fluid-size($now-size, $next-size, $now-break, $next-break);\n    @if $now-key == $DEFAULT-BREAK and not contain(null 0, $limit-break) {\n      #{$property}: $fluid-size;\n    }\n    @if($max-size != null) and contain($first-size $last-size, $i) {\n      @if $limit-break == 0px {\n        #{$property}: $max-size;\n      }\n      @else {\n        @include media(\">=#{$limit-break}\") {\n          #{$property}: $max-size;\n        }\n      }\n    }\n    @else if $now-key != $DEFAULT-BREAK {\n      @include media(\">=#{$now-key}\") {\n        #{$property}: $fluid-size;\n      }\n    }\n  }\n}\n\n@mixin fluid($property, $size, $max-size: null) {\n  $scaled-size: calc-size(calc-angle($size));\n\n  $keys:   join($DEFAULT-BREAK, map-keys($breakpoints));\n  $values: join($size, $scaled-size);\n\n  @include fluid-media($property, to-map($keys, $values), $max-size);\n}\n\n// -- Interface ----------------------------------------------------------------\n// Font\n@mixin font-size($size, $max-size: null) {\n  @include fluid(font-size, $size, $max-size);\n}\n@mixin line-height($size, $max-size: null) {\n  @include fluid(line-height, $size, $max-size);\n}\n@mixin text-indent($size, $max-size: null) {\n  @include fluid(text-indent, $size, $max-size);\n}\n@mixin letter-spacing($size, $max-size: null) {\n  @include fluid(letter-spacing, $size, $max-size);\n}\n@mixin word-spacing($size, $max-size: null) {\n  @include fluid(word-spacing, $size, $max-size);\n}\n\n// Box\n@mixin width($size, $max-size: null) {\n  @include fluid(width, $size, $max-size);\n}\n@mixin height($size, $max-size: null) {\n  @include fluid(height, $size, $max-size);\n}\n@mixin border-width($size, $max-size: null) {\n  @include fluid(border-width, $size, $max-size);\n}\n@mixin margin($size, $max-size: null) {\n  @include fluid(margin, $size, $max-size);\n}\n@mixin margin-top($size, $max-size: null) {\n  @include fluid(margin-top, $size, $max-size);\n}\n@mixin margin-bottom($size, $max-size: null) {\n  @include fluid(margin-bottom, $size, $max-size);\n}\n@mixin margin-left($size, $max-size: null) {\n  @include fluid(margin-left, $size, $max-size);\n}\n@mixin margin-right($size, $max-size: null) {\n  @include fluid(margin-right, $size, $max-size);\n}\n@mixin padding($size, $max-size: null) {\n  @include fluid(padding, $size, $max-size);\n}\n@mixin padding-top($size, $max-size: null) {\n  @include fluid(padding-top, $size, $max-size);\n}\n@mixin padding-bottom($size, $max-size: null) {\n  @include fluid(padding-bottom, $size, $max-size);\n}\n@mixin padding-left($size, $max-size: null) {\n  @include fluid(padding-left, $size, $max-size);\n}\n@mixin padding-right($size, $max-size: null) {\n  @include fluid(padding-right, $size, $max-size);\n}\n","// ____________________________________________________________________________\n//\n//    Unit Conversion v.2.1.13\n//    npm install sass-unitconverter\n//    Based on https://github.com/jakob-e/unitconversion\n// ____________________________________________________________________________\n//\n//   Function                  Input units\n//\n//   Absolute length\n//   px(input);                px, pt, pc, in, mm, cm, em, rem, number\n//   pt(input);                px, pt, pc, in, mm, cm, em, rem, number\n//   pc(input);                px, pt, pc, in, mm, cm, em, rem, number\n//   in(input);                px, pt, pc, in, mm, cm, em, rem, number\n//   mm(input);                px, pt, pc, in, mm, cm, em, rem, number\n//   cm(input);                px, pt, pc, in, mm, cm, em, rem, number\n//\n//   Relative length\n//   em(input);                px, pt, pc, in, mm, cm, em, rem, number\n//   rem(input);               px, pt, pc, in, mm, cm, em, rem, number\n//   ex(input);                ex, number\n//   ch(input);                ch, number\n//   vw(input);                vw, number\n//   vh(input);                vh, number\n//   vmin(input);              vmin, number\n//   vmax(input);              vmax, number\n//\n//   Angle\n//   deg(input);               deg, rad, grad, turn, number\n//   rad(input);               deg, rad, grad, turn, number\n//   grad(input);              deg, rad, grad, turn, number\n//   turn(input);              deg, rad, grad, turn, number\n//\n//   Resolution\n//   dpi(input);               dpi, dpcm, dppx, number\n//   dpcm(input);              dpi, dpcm, dppx, number\n//   dppx(input);              dpi, dpcm, dppx, number\n//\n//   Time\n//   s(input);                 s, ms, number\n//   ms(input);                s, ms, number\n//\n//   Frequency\n//   hz(input);                hz, khz, number\n//   khz(input);               hz, khz, number\n//\n//   String\n//   str(input);               anything not null\n//\n//   Number, int and uint\n//   num(input);               px, pt, pc, mm, cm, in, em, rem, ex, ch,\n//                             vw, vh, vmin, vmax, deg, rad, grad, turn,\n//                             dpi, dpcm, dppx, s, ms, hz, khz, number, string\n//   int(input);               as number\n//   uint(input);              as number\n//\n//   ratio                     number to fraction\n//\n//   ETC Convert\n//   one-unit(input);          px, pt, pc, mm, cm, in, em, rem, ex, ch,\n//                             vw, vh, vmin, vmax, deg, rad, grad, turn,\n//                             dpi, dpcm, dppx, s, ms, hz, khz, number\n//   to-unit(input, unit);     same\n//   to-unit-list(list, unit); same as list\n//   to-unit-map(map, unit);   same as map\n//\n//   Aliases\n//   string(input);\n//   number(input);\n//\n// ____________________________________________________________________________\n\n// == Base =====================================================================\n// Base font size in pixel for converting em and rem to absolute lengths.\n$root-font-size: 16px            !default;\n$base-font-size: $root-font-size !default;\n\n@function n-units($number) {\n  @return (\n    // absolute length\n    px: $number * 1px, pt: $number * 1pt, pc: $number * 1pc,\n    mm: $number * 1mm, cm: $number * 1cm, in: $number * 1in,\n\n    // relative length - font based\n    em: $number * 1em, rem: $number * 1rem,\n    ch: $number * 1ch,  ex: $number * 1ex,\n\n    // relative length - viewport based\n    vw:   $number * 1vw,     vh: $number * 1vh,\n    vmin: $number * 1vmin, vmax: $number * 1vmax,\n\n    // angle\n    deg:  $number * 1deg,   rad: $number * 1rad,\n    grad: $number * 1grad, turn: $number * 1turn,\n\n    // time\n    s: $number * 1s, ms: $number * 1ms,\n\n    // frequency\n    hz: $number * 1Hz, khz: $number * 1kHz,\n    Hz: $number * 1Hz, kHz: $number * 1kHz,\n\n    // resolution\n    dppx: $number * 1dppx, dpcm: $number * 1dpcm, dpi: $number * 1dpi,\n\n    // percent or number\n    \"%\": $number * 1%, pct:    $number * 1%, percent: $number * 1%,\n    num: $number * 1,  number: $number * 1\n  );\n}\n\n// == Interface ================================================================\n// Absolute lengths\n@function px($input) { @return to-unit($input, px); }\n@function pt($input) { @return to-unit($input, pt); }\n@function pc($input) { @return to-unit($input, pc); }\n@function mm($input) { @return to-unit($input, mm); }\n@function cm($input) { @return to-unit($input, cm); }\n@function in($input) { @return to-unit($input, in); }\n\n// Angles\n@function  deg($input) { @return to-unit($input,  deg); }\n@function  rad($input) { @return to-unit($input,  rad); }\n@function grad($input) { @return to-unit($input, grad); }\n@function turn($input) { @return to-unit($input, turn); }\n\n// Resolution\n@function  dpi($input) { @return to-unit($input,  dpi); }\n@function dpcm($input) { @return to-unit($input, dpcm); }\n@function dppx($input) { @return to-unit($input, dppx); }\n\n// Time\n@function ms($input) { @return to-unit($input, ms); }\n@function  s($input) { @return to-unit($input,  s); }\n\n// Frequencies\n@function  hz($input) { @return to-unit($input,  hz); }\n@function khz($input) { @return to-unit($input, khz); }\n\n// Relative lengths\n@function em($input...) {\n  $em: to-unit(nth($input,1), em);\n  // Adjust for compounds (visual size)\n  @if length($input) > 1 {\n    @for $i from 2 through length($input){\n      $em: $em / num(em(nth($input,$i)));\n    }\n  }\n  @return $em;\n}\n@function rem($input) { @return to-unit($input, rem); }\n\n// Inconvertible relative lengths – depends on font\n@function ex($input) { @return to-unit($input, ex); }\n@function ch($input) { @return to-unit($input, ch); }\n\n// Viewport\n@function   vw($input) { @return to-unit($input,   vw); }\n@function   vh($input) { @return to-unit($input,   vh); }\n@function vmin($input) { @return to-unit($input, vmin); }\n@function vmax($input) { @return to-unit($input, vmax); }\n\n// Strings and numbers\n// https://css-tricks.com/snippets/sass/strip-unit-function/\n// https://stackoverflow.com/questions/47630616/scss-arithmetic-operation-with-string\n@function str($input) { @return #{$input};  }\n@function num($input) {\n  @if type-of($input) == 'number' and not unitless($input) {\n    @return $input / ($input * 0 + 1);\n  } @else if type-of($input) != 'string' {\n    @error 'Could not convert `#{$input}` - must be `type-of number or a string.`';\n    @return null;\n  }\n\n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($input, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  @for $i from if($minus, 2, 1) through str-length($input) {\n    $character: str-slice($input, $i, $i);\n\n    @if (index(map-keys($numbers), $character) or $character == '.') {\n      @if $character == '.' {\n        $digits: 1;\n      } @else if $digits == 0 {\n        $result: $result * 10 + map-get($numbers, $character);\n      } @else {\n        $digits: $digits * 10;\n        $result: $result + map-get($numbers, $character) / $digits;\n      }\n    }\n  }\n\n  @return if($minus, -$result, $result);;\n}\n@function int($input) {\n  $num: num($input);\n  @return if($num<0, ceil($num), floor($num));\n}\n@function uint($input) { @return abs(int($input)); }\n\n// Aliases\n@function string($input) { @return str($input); }\n@function number($input) { @return num($input); }\n\n\n// == Conversion ===============================================================\n// get unit\n@function one-unit($input) {\n  @if type-of($input) == 'number' {\n    @return ($input / num($input));\n  }\n  @if type-of($input) != 'string' {\n    @error 'Value for `unit` should be a number or string.';\n  }\n\n  $units: n-units(1);\n  $parsed-unit: false;\n\n  @each $unit in $units {\n    // str-index - find substring in a string\n    // 'px' in '10px' for example\n\n    // $unit is a pair of ['px': 1px] (item in $units)\n    // nth(['px': 1px], 1) returns 'px'\n    // nth(['px': 1px], 2) returns 1px\n\n    @if (str-index($input, nth($unit, 1))) {\n      $parsed-unit: nth($unit, 2);\n    }\n  }\n\n  @if (not $parsed-unit) {\n    @error 'Invalid unit `#{$input}` – must be a valid CSS unit';\n  }\n\n  @return $parsed-unit;\n}\n\n// Conversion function\n@function to-unit($input, $unit) {\n  // Test against valid CSS units\n  $units: n-units(0);\n  $to-unit: map-get($units, $unit);\n\n  // Error handling – wrong $unit\n  // Incomparable units are caught in convertion\n  @if not $to-unit {\n    @error 'Could not convert to `#{$unit}` – must be a valid CSS unit';\n    @return null;\n  }\n\n  // Number/incomparable conversion\n  @if index(num number ex ch vw vh vmin vmax, $unit) {\n    $value: num($input);\n  }\n\n  // EM convertion using px as base\n  @if index(em, unit($input)) {\n    $input: 0px + num($input) * $base-font-size/1px;\n  }\n  @if index(em, $unit) and not unitless($input) {\n    $input: 0px + px($input);\n    $input: num($input) * 1px/$base-font-size;\n  }\n\n  // REM convertion using px as base\n  @if index(rem, unit($input)) {\n    $input: 0px + num($input) * $root-font-size/1px;\n  }\n  @if index(rem, $unit) and not unitless($input) {\n    $input: 0px + $input;\n    $input: num($input) * 1px/$root-font-size;\n  }\n\n  // Bug fix – resolution units seems to be flipped\n  @if index(dpi dpcm dppx, $unit){\n    $units: (dppx: 0dppx, dpcm: 0dpcm, dpi: 0dpi);\n    $input-unit: map-get($units, unit($input));\n    $input: if(1dppx < 95dpi,num($input-unit + (num($input) + $to-unit)),$input);\n  }\n\n  // Convert\n  @return $to-unit + $input;\n}\n\n@function to-unit-list($list, $unit) {\n  $new-list: ();\n\n  @each $value in $list {\n    $converted: to-unit($value, $unit);\n    $new-list: append($new-list, $converted);\n  }\n  @return $new-list;\n}\n\n@function to-unit-map($map, $unit) {\n  $new-map: ();\n\n  @each $key, $value in $map {\n    $converted: to-unit($value, $unit);\n    $new-map: map-merge($new-map, ($key: $converted));\n  }\n  @return $new-map;\n}\n\n//  Convert number to ratio (fraction)\n//  ratio(1.7777778) =>   16/9\n@function ratio($x, $y: null){\n  @if not $y {\n    $n: $x; $y: 1;\n    @while $y < 10 {\n      $x:  $n * 10 - ((10 - $y) * $n);\n      @if $x == round($x){ @return #{$x}/#{$y}; }\n      @else { $y: $y + 1; }\n    }\n    $x: round($n * 1000000); $y: 1000000;\n    @while $x % 10 == 0 { $x: $x/10; $y: $y/10; }\n    @while $x % 5 == 0 { $x: $x/5; $y: $y/5; }\n    @while $x % 2 == 0 { $x: $x/2; $y: $y/2; }\n    @return #{$x}/#{$y};\n  }\n  @else if $x == round($x) and $y == round($y){ @return #{$x}/#{$y}; }\n  @warn 'X and Y must be integers'; @return false;\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@import '~fluid-size/fluid-size';\n@import '../Settings/Colors.scss';\n@import '../Settings/Fonts.scss';\n@import '../Settings/Layouts.scss';\n@import '../Tools/Tools.scss';\n\n.TodoInsert {\n  @include container-all;\n  @include flex-container-start-left;\n  height:        3rem;\n  border:        2px solid $lightGrey;\n  border-radius: $default-round;\n  margin-bottom: 0.3rem;\n\n  input {\n    @include container-all;\n    @include flex-item-size-up(1);\n    background:  none;\n    outline:     none;\n    border:      none;\n    width:       80%;\n    margin-left: $default-margin;\n\n    &::placeholder {\n    }\n  }\n\n  button {\n    $padding:     $default-padding + 0.3rem;\n    $round-left:  1px;\n    $round-right: 7px;\n\n    @include font-size(1.4rem, 2.1rem);\n    color:            $white;\n    background-color: lightColor($lightGrey, 2);\n    cursor:           pointer;\n    outline:          none;\n    border:           none;\n    border-radius:    $round-left $round-right $round-right $round-left;\n    padding-left:     $padding +0.1rem;\n    padding-right:    $padding;\n\n    &:hover {\n      background-color: lightColor($lightGrey, 8.3);\n    }\n  }\n}\n","@import '~include-media-or/dist/include-media';\n@import '~fluid-size/fluid-size';\n@import '../Settings/Colors.scss';\n@import '../Settings/Fonts.scss';\n@import '../Settings/Layouts.scss';\n@import '../Tools/Tools.scss';\n\n.TodoListItem {\n  @include flex-container-start-left;\n  @include flex-container-alignX-edge;\n  @include flex-container-alignY-center;\n  cursor:     pointer;\n  width:      100%;\n  height:     100%;\n  border-top: 1px solid $darkx3White;\n  &.even {\n    background-color: $darkWhite;\n  }\n\n  @include media(\">=laptop\") {\n    svg {\n      visibility: hidden;\n    }\n    &:hover {\n      svg {\n        visibility: visible;\n      }\n    }\n  }\n\n  .remove {\n    padding: $default-padding + 0.2rem;\n    svg {\n      @include font-size($default-font-size     + 0.1rem,\n                         $default-font-max-size + 0.1rem);\n      color: lightColor($red, 3);\n    }\n    &:hover {\n      svg {\n        color: lightColor($red, 10);\n      }\n    }\n  }\n\n  .checkbox {\n    @include flex-container-start-left;\n    @include flex-container-alignY-center;\n    @include flex-item-size-up(1);\n    padding: $default-padding - 0.2rem;\n\n    svg {\n      @include font-size($default-font-size     + 0.5rem,\n                         $default-font-max-size + 0.3rem);\n      visibility: visible;\n      color:      lightColor($lightGrey, 10);\n    }\n    .text {\n      margin-left: $default-margin;\n    }\n\n    &:hover {\n      svg {\n        color: lightColor($lightGrey, 12);\n      }\n      .text {\n        color: lightColor($lightx3Black, 5);\n      }\n    }\n\n\n    &.checked {\n      svg {\n        color: $primary-color;\n      }\n      .text {\n        color:           $lightGrey;\n        text-decoration: line-through;\n      }\n      &:hover {\n        svg {\n          color: lightColor($primary-color, 1.5);\n        }\n        .text {\n          color: lightColor($lightGrey, 3);\n        }\n      }\n    }\n  }\n}\n","@import '../Settings/Colors.scss';\n@import '../Settings/Layouts.scss';\n@import '../Tools/Tools.scss';\n\n.TodoList {\n  @include container;\n  height:        80vh;\n  border-radius: $default-round;\n}\n"]}